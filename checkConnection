

           // ********** call checkInternetConnection method in starting of 
                                    every activity or fragment first then start other things ********//



 checkInternetConnection();

 
// if you have to use it on any button put this
  
 private boolean newtworkState;
  
 newtworkState = checkInternetConnection();
 
 if(newtworkState)
 {
   //put your code
 }

 ********** this the is the method **********
 
 private boolean checkInternetConnection() {

        if ((new ConnectionDetector(this).isConnectingToInternet())) {
            Log.d("internet status", "Internet Access");

            return true;
        } else {
            Log.d("internet status", "no Internet Access");

            LayoutInflater factory = LayoutInflater.from(this);
            final View deleteDialogView = factory.inflate(R.layout.raw_file_for_internet_connection, null);
            final AlertDialog deleteDialog = new AlertDialog.Builder(this).create();
            deleteDialog.setView(deleteDialogView);


            TextView retry = deleteDialogView.findViewById(R.id.retry_internet_connection); // textview retry
            TextView exit = deleteDialogView.findViewById(R.id.exit_internet_connection); // textview exit

            retry.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    checkInternetConnection();
                    deleteDialog.dismiss();
                }
            });

            exit.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    LoginActivity.this.finish();
                    deleteDialog.dismiss();
                }
            });

            deleteDialog.show();
            deleteDialog.setCancelable(true);

            return false;
        }

    }

          ************************ Add Connection detector another class **********************         
          
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

public class ConnectionDetector {
    private Context _context;

    public ConnectionDetector(Context context) {
        this._context = context;
    }

    public boolean isConnectingToInternet() {
        if (networkConnectivity()) {
            try {
                HttpURLConnection urlc = (HttpURLConnection) (new URL(
                        "http://www.google.com").openConnection());
                urlc.setRequestProperty("User-Agent", "Test");
                urlc.setRequestProperty("Connection", "close");
                urlc.setConnectTimeout(3000);
                urlc.setReadTimeout(4000);
                urlc.connect();
                // networkcode2 = urlc.getResponseCode();
                return (urlc.getResponseCode() == 200);
            } catch (IOException e) {
                return (false);
            }
        } else
            return false;

    }

    private boolean networkConnectivity() {
        ConnectivityManager cm = (ConnectivityManager) _context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = cm.getActiveNetworkInfo();
        if (networkInfo != null && networkInfo.isConnected()) {
            return true;
        }
        return false;
    }
}
 
                 *************** XML file for internet connection *****************
                 
<?xml version="1.0" encoding="utf-8"?>
<android.support.v7.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
    </LinearLayout>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginBottom="@dimen/margin_10"
        android:orientation="vertical">

        <ImageView
            android:layout_marginTop="@dimen/margin_10"
            android:layout_width="@dimen/width_96"
            android:layout_height="@dimen/height_96"
            android:layout_gravity="center"
            android:src="@drawable/app_logo"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="@dimen/padding_5"
            android:textAlignment="center"
            android:fontFamily="@font/montserrat_semibold"
            android:textSize="@dimen/text_size16"
            android:text="Internet connection is not available"
            android:layout_margin="@dimen/margin_5"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="@dimen/padding_10"
            android:textAlignment="center"
            android:fontFamily="@font/montserrat_semibold"
            android:textSize="@dimen/text_size12"
            android:text="Please connect to the internet" />


        <!--<View
            android:layout_width="match_parent"
            android:layout_height="1dp"
            android:background="@color/colorPrimary"
            android:layout_margin="@dimen/margin_5"/>-->


        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="@dimen/margin_15"
            android:paddingHorizontal="@dimen/padding_15"
            android:weightSum="2">

            <TextView
                android:id="@+id/retry_internet_connection"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/margin_5"
                android:layout_marginRight="@dimen/margin_5"
                android:layout_marginLeft="@dimen/margin_5"
                android:layout_marginBottom="@dimen/margin_10"
                android:layout_gravity="center"
                android:background="@drawable/rounded_background"
                android:fontFamily="@font/montserrat_semibold"
                android:padding="@dimen/padding_10"
                android:text="Retry"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="@dimen/text_size16" />

            <TextView
                android:id="@+id/exit_internet_connection"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/margin_5"
                android:layout_marginRight="@dimen/margin_5"
                android:layout_marginLeft="@dimen/margin_5"
                android:layout_marginBottom="@dimen/margin_10"
                android:layout_gravity="center"
                android:background="@drawable/rounded_background"
                android:fontFamily="@font/montserrat_semibold"
                android:padding="@dimen/padding_10"
                android:text="Exit"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="@dimen/text_size16" />

        </LinearLayout>
        
    </LinearLayout>

</android.support.v7.widget.CardView>                 
                 
                 
public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    private FirebaseAuth mAuth;
    private static final String TAG = "MainActivity";

    private static final int RC_SIGN_IN = 9001;


    private GoogleSignInClient mGoogleSignInClient;
    private TextView mStatusTextView;
    private TextView mDetailTextView;
    private TextView mCurrentLocation;
    private Button mMap;
    public ProgressBar mProgressBar;

    DAO dao;
    EntitySignIn entitySignIn;

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        // Views
        mStatusTextView = findViewById(R.id.status);
        mDetailTextView = findViewById(R.id.detail);
        mCurrentLocation = findViewById(R.id.current_location_txt);

        mProgressBar = findViewById(R.id.progressBar);

        mMap = findViewById(R.id.mapbtn);
        // Button listeners
        findViewById(R.id.signInButton).setOnClickListener(this);
        findViewById(R.id.signOutButton).setOnClickListener(this);
        findViewById(R.id.disconnectButton).setOnClickListener(this);
        findViewById(R.id.mapbtn).setOnClickListener(this);

        FirebaseApp.initializeApp(this);
        // [START config_signin]
        // Configure Google Sign In
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).
                requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();
        // [END config_signin]

        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);

        // Initialize Firebase Auth
        mAuth = FirebaseAuth.getInstance();

        Database database = Database.getInstance(this);
        dao = database.gmailDao();



    }

    public void showProgressBar(boolean visibility){
        mProgressBar.setVisibility(visibility ? View.VISIBLE : View.INVISIBLE);
    }

    public void hideProgressBar(boolean visibility){
        mProgressBar.setVisibility(visibility ? View.VISIBLE : View.INVISIBLE);
    }



    private void updateUI(FirebaseUser user) {
        Log.d(TAG, "updateUI: called");
        hideProgressBar(false);

        if (user != null) {

            mStatusTextView.setText(getString(R.string.google_status_fmt, user.getEmail()));
            mDetailTextView.setText(getString(R.string.firebase_status_fmt, user.getUid()));

            String gmail = user.getEmail();
            String Uid = user.getUid();
            Log.d(TAG, "updateUI: mail "+gmail + "UID "+Uid);

            entitySignIn = new EntitySignIn(gmail,Uid);

            new InsertNoteAsyncTask(dao).execute(entitySignIn);


            findViewById(R.id.signInButton).setVisibility(View.GONE);
            findViewById(R.id.signOutAndDisconnect).setVisibility(View.VISIBLE);

            mMap.setVisibility(View.VISIBLE);
            mCurrentLocation.setVisibility(View.VISIBLE);

            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    dao.getEmail();
                    List<EntitySignIn> mail = dao.getEmail();
                    Log.d(TAG, "updateUI: database" +mail.toString());
                }
            });

            t.start();


        } else {
            mStatusTextView.setText(R.string.signed_out);
            mDetailTextView.setText(null);

            findViewById(R.id.signInButton).setVisibility(View.VISIBLE);
            findViewById(R.id.signOutAndDisconnect).setVisibility(View.GONE);
        }
    }

    private static class InsertNoteAsyncTask extends AsyncTask<EntitySignIn, Void, Void> {
        private DAO gmailDao;

        private InsertNoteAsyncTask(DAO noteDao){
            this.gmailDao = noteDao;
        }

        @Override
        protected Void doInBackground(EntitySignIn... notes) {
            gmailDao.insert(notes[0]);
            return null;
        }
    }


    private void revokeAccess() {
        // Firebase sign out
        mAuth.signOut();

        // Google revoke access
        mGoogleSignInClient.revokeAccess().addOnCompleteListener(this,
                new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        updateUI(null);
                    }
                });
    }

    // [START signin]
    private void signIn() {
        Log.d(TAG, "signIn: called");
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }

    private void signOut() {
        // Firebase sign out
        mAuth.signOut();

        // Google sign out
        mGoogleSignInClient.signOut().addOnCompleteListener(this,
                new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        updateUI(null);
                    }
                });
    }

    // [START auth_with_google]
    private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {

        Log.d(TAG, "firebaseAuthWithGoogle:" + acct.getId());
        showProgressBar(true);

        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information
                            Log.d(TAG, "signInWithCredential:success");
                            FirebaseUser user = mAuth.getCurrentUser();
                            updateUI(user);
                        } else {
                            // If sign in fails, display a message to the user.
                            Log.w(TAG, "signInWithCredential:failure", task.getException());
                            Snackbar.make(findViewById(R.id.main_layout), "Authentication Failed.", Snackbar.LENGTH_SHORT).show();
                            updateUI(null);
                        }

                        // [START_EXCLUDE]
                        hideProgressBar(false);
                        // [END_EXCLUDE]
                    }
                });
    }
    // [END auth_with_google]
    @Override
    public void onClick(View v) {
        int i = v.getId();
        if (i == R.id.signInButton) {
            signIn();
        } else if (i == R.id.signOutButton) {
            signOut();
        } else if (i == R.id.disconnectButton) {
            revokeAccess();
        }else if (i == R.id.mapbtn){
            Toast.makeText(this, "Map is clicked", Toast.LENGTH_SHORT).show();

            Fragment fragment = new GoogleMapFragment();
            FragmentManager fragmentManager = getSupportFragmentManager();
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.replace(R.id.main_layout, fragment);
            fragmentTransaction.addToBackStack(null);
            fragmentTransaction.commit();

        }
    }

    // [START onactivityresult]
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        Log.d(TAG, "onActivityResult: called result code "+requestCode);
        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);
        if (requestCode == RC_SIGN_IN) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            Log.d(TAG, "onActivityResult: task "+task);
            try {
                // Google Sign In was successful, authenticate with Firebase
                GoogleSignInAccount account = task.getResult(ApiException.class);
                firebaseAuthWithGoogle(account);
            } catch (ApiException e) {
                // Google Sign In failed, update UI appropriately
                Log.w(TAG, "Google sign in fail"+ e);
                // [START_EXCLUDE]
                updateUI(null);
                // [END_EXCLUDE]
            }
        }
    }
    // [END onactivityresult]

    //When initializing your Activity,
    // check to see if the user is currently signed in.
    @Override
    public void onStart() {
        super.onStart();
        // Check if user is signed in (non-null) and update UI accordingly.
       /* FirebaseUser currentUser = mAuth.getCurrentUser();
        updateUI(currentUser);*/
    }

